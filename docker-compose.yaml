services:
  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./docker/postgresql/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - app_network

  api:
    build:
      context: .
      args:
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
      network: host
    user: "${UID:-1000}:${GID:-1000}"
    image: reward-api:latest
    restart: always
    environment:
      DJANGO_SETTINGS_MODULE: core.settings.prod
    volumes:
      - ./docker/entrypoints/api_entrypoint.sh:/app/entrypoint.sh
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    networks:
      - app_network

  redis:
    image: redis:latest
    restart: always
    networks:
      - app_network
    user: "redis:redis"

  celery-worker:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.services
      args:
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    restart: always
    command: celery -A core worker --loglevel=info
    depends_on:
      - db
      - redis
      - api
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER}
      CELERY_RESULT_BACKEND: ${CELERY_BROKER}
      DJANGO_SETTINGS_MODULE: core.settings.prod
    user: "${UID:-1000}:${GID:-1000}"
    networks:
      - app_network

  celery-beat:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.services
      args:
        - USER_ID=${UID:-1000}
        - GROUP_ID=${GID:-1000}
    restart: always
    command: celery -A core beat --loglevel=info
    depends_on:
      - db
      - redis
      - api
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER}
      CELERY_RESULT_BACKEND: ${CELERY_BROKER}
      DJANGO_SETTINGS_MODULE: core.settings.prod
    user: "${UID:-1000}:${GID:-1000}"
    networks:
      - app_network

volumes:
  postgres_data:

networks:
  app_network: